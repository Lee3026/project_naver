{"ast":null,"code":"// require sources\nimport _Swiper from 'swiper/dist/js/swiper.js';\nconst Swiper = window.Swiper || _Swiper;\n\n// pollfill\nif (typeof Object.assign != 'function') {\n  Object.defineProperty(Object, 'assign', {\n    value(target, varArgs) {\n      if (target == null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n      const to = Object(target);\n      for (let index = 1; index < arguments.length; index++) {\n        const nextSource = arguments[index];\n        if (nextSource != null) {\n          for (const nextKey in nextSource) {\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    },\n    writable: true,\n    configurable: true\n  });\n}\n\n// as of swiper 4.0.7\n// http://idangero.us/swiper/api/#events\nconst DEFAULT_EVENTS = ['beforeDestroy', 'slideChange', 'slideChangeTransitionStart', 'slideChangeTransitionEnd', 'slideNextTransitionStart', 'slideNextTransitionEnd', 'slidePrevTransitionStart', 'slidePrevTransitionEnd', 'transitionStart', 'transitionEnd', 'touchStart', 'touchMove', 'touchMoveOpposite', 'sliderMove', 'touchEnd', 'click', 'tap', 'doubleTap', 'imagesReady', 'progress', 'reachBeginning', 'reachEnd', 'fromEdge', 'setTranslate', 'setTransition', 'resize'];\n\n// export\nexport default {\n  name: 'swiper',\n  props: {\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    globalOptions: {\n      type: Object,\n      required: false,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      swiper: null,\n      classes: {\n        wrapperClass: 'swiper-wrapper'\n      }\n    };\n  },\n  ready() {\n    if (!this.swiper) {\n      this.mountInstance();\n    }\n  },\n  mounted() {\n    if (!this.swiper) {\n      let setClassName = false;\n      for (const className in this.classes) {\n        if (this.classes.hasOwnProperty(className)) {\n          if (this.options[className]) {\n            setClassName = true;\n            this.classes[className] = this.options[className];\n          }\n        }\n      }\n      setClassName ? this.$nextTick(this.mountInstance) : this.mountInstance();\n    }\n  },\n  activated() {\n    this.update();\n  },\n  updated() {\n    this.update();\n  },\n  beforeDestroy() {\n    this.$nextTick(function () {\n      if (this.swiper) {\n        this.swiper.destroy && this.swiper.destroy();\n        delete this.swiper;\n      }\n    });\n  },\n  methods: {\n    update() {\n      if (this.swiper) {\n        this.swiper.update && this.swiper.update();\n        this.swiper.navigation && this.swiper.navigation.update();\n        this.swiper.pagination && this.swiper.pagination.render();\n        this.swiper.pagination && this.swiper.pagination.update();\n      }\n    },\n    mountInstance() {\n      const swiperOptions = Object.assign({}, this.globalOptions, this.options);\n      this.swiper = new Swiper(this.$el, swiperOptions);\n      this.bindEvents();\n      this.$emit('ready', this.swiper);\n    },\n    bindEvents() {\n      const vm = this;\n      DEFAULT_EVENTS.forEach(eventName => {\n        this.swiper.on(eventName, function () {\n          vm.$emit(eventName, ...arguments);\n          vm.$emit(eventName.replace(/([A-Z])/g, '-$1').toLowerCase(), ...arguments);\n        });\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAcA;AACA;AACA;;AAEA;AACA;EACAA;IACAC;MACA;QACA;MACA;MACA;MACA;QACA;QACA;UACA;YACA;cACAC;YACA;UACA;QACA;MACA;MACA;IACA;IACAC;IACAC;EACA;AACA;;AAEA;AACA;AACA,wBACA,iBACA,eACA,8BACA,4BACA,4BACA,0BACA,4BACA,0BACA,mBACA,iBACA,cACA,aACA,qBACA,cACA,YACA,SACA,OACA,aACA,eACA,YACA,kBACA,YACA,YACA,gBACA,iBACA,SACA;;AAEA;AACA;EACAC;EACAC;IACAC;MACAC;MACAC;IACA;IACAC;MACAF;MACAG;MACAF;IACA;EACA;EACAG;IACA;MACAC;MACAC;QACAC;MACA;IACA;EACA;EACAC;IACA;MACA;IACA;EACA;EACAC;IACA;MACA;MACA;QACA;UACA;YACAC;YACA;UACA;QACA;MACA;MACAA;IACA;EACA;EACAC;IACA;EACA;EACAC;IACA;EACA;EACAC;IACA;MACA;QACA;QACA;MACA;IACA;EACA;EACAC;IACAC;MACA;QACA;QACA;QACA;QACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;IACAC;MACA;MACAC;QACA;UACAC;UACAA;QACA;MACA;IACA;EACA;AACA","names":["Object","value","to","writable","configurable","name","props","options","type","default","globalOptions","required","data","swiper","classes","wrapperClass","ready","mounted","setClassName","activated","updated","beforeDestroy","methods","update","mountInstance","bindEvents","DEFAULT_EVENTS","vm"],"sourceRoot":"src/components","sources":["Swiper.vue"],"sourcesContent":["<template>\n  <div class=\"swiper-container\">\n    <slot name=\"parallax-bg\"></slot>\n    <div :class=\"classes.wrapperClass\">\n      <slot></slot>\n    </div>\n    <slot name=\"pagination\"></slot>\n    <slot name=\"button-prev\"></slot>\n    <slot name=\"button-next\"></slot>\n    <slot name=\"scrollbar\"></slot>\n  </div>\n</template>\n\n<script>\n  // require sources\n  import _Swiper from 'swiper/dist/js/swiper.js'\n  const Swiper = window.Swiper || _Swiper\n\n  // pollfill\n  if (typeof Object.assign != 'function') {\n    Object.defineProperty(Object, 'assign', {\n      value(target, varArgs) {\n        if (target == null) {\n          throw new TypeError('Cannot convert undefined or null to object')\n        }\n        const to = Object(target)\n        for (let index = 1; index < arguments.length; index++) {\n          const nextSource = arguments[index]\n          if (nextSource != null) {\n            for (const nextKey in nextSource) {\n              if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                to[nextKey] = nextSource[nextKey]\n              }\n            }\n          }\n        }\n        return to\n      },\n      writable: true,\n      configurable: true\n    })\n  }\n\n  // as of swiper 4.0.7\n  // http://idangero.us/swiper/api/#events\n  const DEFAULT_EVENTS = [\n    'beforeDestroy',\n    'slideChange',\n    'slideChangeTransitionStart',\n    'slideChangeTransitionEnd',\n    'slideNextTransitionStart',\n    'slideNextTransitionEnd',\n    'slidePrevTransitionStart',\n    'slidePrevTransitionEnd',\n    'transitionStart',\n    'transitionEnd',\n    'touchStart',\n    'touchMove',\n    'touchMoveOpposite',\n    'sliderMove',\n    'touchEnd',\n    'click',\n    'tap',\n    'doubleTap',\n    'imagesReady',\n    'progress',\n    'reachBeginning',\n    'reachEnd',\n    'fromEdge',\n    'setTranslate',\n    'setTransition',\n    'resize'\n  ]\n\n  // export\n  export default {\n    name: 'swiper',\n    props: {\n      options: {\n        type: Object,\n        default: () => ({})\n      },\n      globalOptions: {\n        type: Object,\n        required: false,\n        default: () => ({})\n      }\n    },\n    data() {\n      return {\n        swiper: null,\n        classes: {\n          wrapperClass: 'swiper-wrapper'\n        }\n      }\n    },\n    ready() {\n      if (!this.swiper) {\n        this.mountInstance()\n      }\n    },\n    mounted() {\n      if (!this.swiper) {\n        let setClassName = false\n        for(const className in this.classes) {\n          if (this.classes.hasOwnProperty(className)) {\n            if (this.options[className]) {\n              setClassName = true\n              this.classes[className] = this.options[className]\n            }\n          }\n        }\n        setClassName ? this.$nextTick(this.mountInstance) : this.mountInstance()\n      }\n    },\n    activated() {\n      this.update()\n    },\n    updated() {\n      this.update()\n    },\n    beforeDestroy() {\n      this.$nextTick(function() {\n        if (this.swiper) {\n          this.swiper.destroy && this.swiper.destroy()\n          delete this.swiper\n        }\n      })\n    },\n    methods: {\n      update() {\n        if (this.swiper) {\n          this.swiper.update && this.swiper.update()\n          this.swiper.navigation && this.swiper.navigation.update()\n          this.swiper.pagination && this.swiper.pagination.render()\n          this.swiper.pagination && this.swiper.pagination.update()\n        }\n      },\n      mountInstance() {\n        const swiperOptions = Object.assign({}, this.globalOptions, this.options)\n        this.swiper = new Swiper(this.$el, swiperOptions)\n        this.bindEvents()\n        this.$emit('ready', this.swiper)\n      },\n      bindEvents() {\n        const vm = this\n        DEFAULT_EVENTS.forEach(eventName => {\n          this.swiper.on(eventName, function() {\n            vm.$emit(eventName, ...arguments)\n            vm.$emit(eventName.replace(/([A-Z])/g, '-$1').toLowerCase(), ...arguments)\n          })\n        })\n      }\n    }\n  }\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}